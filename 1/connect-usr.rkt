#lang planet neil/sicp
;--------------connector------------------
(define (make-connector)
  (let ((value false) (informant false) (constraints '()))
    (define (set-my-value newval setter)
      (cond ((or (not (has-value? me)) (eq? setter informant))
             (set! value newval)
             (set! informant setter)
             (for-each-except setter inform-about-value constraints))
            ((not (= value newval))
             (error "contradiction" (list value newval)))
            (else 'ignored)))

    (define (forget-my-value retractor)
      (if (eq? retractor informant)
          (begin (set! informant false)
                 (for-each-except retractor inform-about-no-value constraints))
          'ignored))
      
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
          (set! constraints (cons new-constraint constraints)))
      (if (has-value? me)
          (inform-about-value new-constraint)))

    (define (me request)
      (cond ((eq? request 'has-value?)
             (if informant true false))
            ((eq? request 'set-value!) set-my-value)
            ((eq? request 'forget) forget-my-value)
            ((eq? request 'value) value)
            ((eq? request 'connect) connect)
            (else (error "Unknown operation -- CONNECTOR" request))))

    me))


(define (has-value? connector)
  (connector 'has-value?))

(define (set-value! connector newval setter)
  ((connector 'set-value!) newval setter))

(define (forget-value! connector setter)
  ((connector 'forget) setter))

(define (get-value connector)
  (connector 'value))

(define (inform-about-value constraint)
  (constraint 'I-have-a-value))

(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))

(define (connect connector constraint)
  ((connector 'connect) constraint))

(define (for-each-except exception procedure list)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? (car items) exception) (loop (cdr items)))
          (else (procedure (car items))
                (loop (cdr items)))))
  (loop list))
;-------------------direct------------------------
(define (direct p1 p2)
  (define (process-new-value)
    (cond ((and (has-value? p1) (not (has-value? p2)))
           (set-value! p2 (get-value p1) me))
          ((and (has-value? p2) (not (has-value? p1)))
           (set-value! p1 (get-value p2) me))))

  (define (process-forget-value)
    (forget-value! p1 me)
    (forget-value! p2 me))
  
  (define (me request)
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          ))
  (connect p1 me)
  (connect p2 me)
me)
;-------------------adder------------------------
(define (adder a b sum)
  (define (process-new-value)
    (cond ((and (has-value? a) (has-value? b))
           (set-value! sum (+ (get-value a) (get-value b)) me))
          ((and (has-value? a) (has-value? sum))
           (set-value! b (- (get-value sum) (get-value a)) me))
          ((and (has-value? b) (has-value? sum))
           (set-value! a (- (get-value sum) (get-value b)) me))))

  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (forget-value! sum me))

  (define (me request)
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          (else (error "Unknow request -- ADDER" request))
          ))
  (connect a me)
  (connect b me)
  (connect sum me)
me)
;-------------------suber------------------------
(define (subtractor a b diff)
  (define (process-new-value)
    (cond ((and (has-value? a) (has-value? b))
           (set-value! diff (- (get-value a) (get-value b)) me))
          ((and (has-value? a) (has-value? diff))
           (set-value! b (+ (get-value diff) (get-value a)) me))
          ((and (has-value? b) (has-value? diff))
           (set-value! a (+ (get-value diff) (get-value b)) me))))

  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (forget-value! diff me))

  (define (me request)
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          (else (error "Unknow request -- SUBER" request))
          ))
  (connect a me)
  (connect b me)
  (connect diff me)
me)

;-------------------multiplier------------------------
(define (multiplier a b product)
  (define (process-new-value)
    (cond ((and (has-value? a) (has-value? b))
           (set-value! product (* (get-value a) (get-value b)) me))
          ((and (has-value? a) (has-value? product))
           (set-value! b (/ (get-value product) (get-value a)) me))
          ((and (has-value? b) (has-value? product))
           (set-value! a (/ (get-value product) (get-value b)) me))))

  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (forget-value! product me))

  (define (me request)
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          (else (error "Unknow request -- MULTIPLIER" request))
          ))
  (connect a me)
  (connect b me)
  (connect product me)
me)

;-------------------divider------------------------
(define (divider a b quotient)
  (define (process-new-value)
    (cond ((and (has-value? a) (has-value? b))
           (set-value! quotient (/ (get-value a) (get-value b)) me))
          ((and (has-value? a) (has-value? quotient))
           (set-value! b (* (get-value quotient) (get-value a)) me))
          ((and (has-value? b) (has-value? quotient))
           (set-value! a (* (get-value quotient) (get-value b)) me))))

  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (forget-value! quotient me))

  (define (me request)
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          (else (error "Unknow request -- DIVIDER" request))
          ))
  (connect a me)
  (connect b me)
  (connect quotient me)
me)
;-------------------constant-----------------------
(define (constant value connector)
  (define (me request)
    (error "Unknow request -- CONSTANT" request))
  (connect connector me)
  (set-value! connector value me)

  me)
;-------------------probe--------------------------
(define (probe name connector)
  (define (print-probe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display "=")
    (display value))
  (define (process-new-value)
    (print-probe (get-value connector)))

  (define (process-forget-value)
    (print-probe "?"))
    
  (define (me request)
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          (else "Unknown request -- PROBE" request)
          ))
  (connect connector me)    
  me)

;-------------------application-------------------
(define v (make-connector))
(define t (make-connector))
(define f (make-connector))
(define d (make-connector))
(define p1 (make-connector))
(define p2 (make-connector))
(define i1 (make-connector))
(define i2 (make-connector))
(define i3 (make-connector))

(probe 'v v)
(probe 't t)
(probe 'f f)
(probe 'd d)

(constant 8 p1)
(constant 14 p2)

(multiplier v t i1)
(subtractor f p2 i2)
(multiplier p1 i2 i3)
(adder i1 i3 d)

(set-value! v 1.6 'usr)
(set-value! t 30 'usr)
(set-value! f 25 'usr)