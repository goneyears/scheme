#lang scheme
(define (runtime) (current-milliseconds))
 
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divide? n test-divisor) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divide? n m)
  (= (remainder n m) 0) ) 
  
(define (square x)
  (* x x))
(define (smallest-divisor n)
  (find-divisor n 2))
  
(define (prime? n)
  (= (smallest-divisor n) n))
(define (exp base n)
  (cond ((= n 0) 1)
        ((even? n) (square (exp base (/ n 2))))
        ((odd? n) (* base (exp base (- n 1))))))
(define (expmod a exp n)
  (cond ((= exp 0) 1)
        ( (even? exp) (remainder (square (expmod a (/ exp 2) n)) n))
        ( (odd? exp) (remainder (* a (expmod a (- exp 1) n)) n))))
(define (fermat-check n )
  (define (fermat-iter n count)
    (cond ((= count n) true)
          ((not-equal (expmod count n n) count) false)
          (else (fermat-iter n (+ count 1)))))
  (fermat-iter n 1))
  
(define (not-equal a b)
  (if (= a b) false true))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime n (- times 1)))
        (else false)))
(define (f-prime? n)
  (fast-prime n 10))
