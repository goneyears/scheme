#lang racket
(require rnrs/base-6)
(define (cons a b)
  (* (expt 2 a) (expt 3 b)))
(define (eliminate z n)
  (if (= (mod z n) 0) (eliminate (/ z n) n)
      z))
 
(define (car z)
  (let ((x (eliminate z 3)))
    (log x 2)))
(define (cdr z)
  (let ((x (eliminate z 2)))
    (log x 3)))

(define zero (lambda (f) (lambda (x) x)))
(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))
(define one (lambda (f) (lambda (x) (f x))))
(define two (lambda (f) (lambda (x) (f (f x)))))
(define (add a b)
  ;(lambda (f x) (f x))
  ;(lambda (f x) (f (f x)))
  (lambda (f x) (b f (a f x))) )
(define (add-another a b)
  (lambda (f) (lambda (x) ((b f) ((a f) x)))))
(define (dp x)
  ((lambda(x) (display 1)) x))
(((add-another one two) dp) 1)