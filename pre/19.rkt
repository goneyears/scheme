#lang scheme
(define (runtime) (current-milliseconds))
 
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divide? n test-divisor) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (find-divisor-2 n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divide? n test-divisor) test-divisor)
        (else (if (= test-divisor 2)
                  (find-divisor-2 n 3)
                  (find-divisor-2 n (+ test-divisor 2)) 
               ))))
(define (divide? n m)
  (= (remainder n m) 0) ) 
  
(define (square x)
  (* x x))
(define (smallest-divisor n)
  (find-divisor-2 n 2))
  
(define (prime? n)
  (= (smallest-divisor n) n))
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)   (report-prime ( - (runtime) start-time))
  (display "****")))
(define (report-prime elapsed-time)
  (display "***")
  (display elapsed-time))
(define (find-prime-more-than n)
  (if (prime? n) (timed-prime-test n)
      (find-prime-more-than (+ n 1))))
(define (f-s base exp)
  (find-prime-more-than (base-exp base exp)))
(define (base-exp base n)
  (cond ((= n 0) 1)
        ((even? n) (square (base-exp base (/ n 2))))
        ((odd? n) (* base (base-exp base (- n 1))))))
(define (expmod a exp n)
  (cond ((= exp 0) 1)
        ( (even? exp) (remainder (square (expmod a (/ exp 2) n)) n))
        ( (odd? exp) (remainder (* a (expmod a (- exp 1) n)) n))))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime n (- times 1)))
        (else false)))
(define (f-prime? n)
  (fast-prime n 2))
(f-s 10 12)